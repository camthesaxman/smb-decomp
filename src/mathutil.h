struct MathutilData
{
    /*0x00*/ Mtx mtxA;
    /*0x30*/ Mtx mtxB;
    u8 filler60[0x90-0x60];
    /*0x90*/ Mtx *mtxStack;
    /*0x94*/ Mtx *mtxStackPtr;
    u8 filler98[0x198-0x98];
    /*0x198*/ float constZero;
    /*0x19C*/ float constOne;
    /*0x1A0*/ float constOneHalf;
    /*0x1A4*/ float constThreeHalves;
    s32 unk1A8;
    u8 unk1AC;
    u8 unk1AD;
    u8 unk1AE;
    u8 unk1AF;
};

void mathutil_init(void);
float func_8000716C(double a);
float mathutil_sqrt(double n);
float mathutil_rsqrt(double n);
float mathutil_sin(s16 angle);
void mathutil_sin_cos_v(s16 a, float *b);
void mathutil_sin_cos(s16 angle);
float mathutil_tan(u32 angle);
s16 mathutil_atan2(double a, double b);
u32 mathutil_atan(double angle);
u32 func_80007424(float a);
void mathutil_vec_dot_normalized(register Vec *vecA, register Vec *vecB);
void mathutil_mtx_from_identity(Mtx mtx);
void mathutil_mtxA_from_identity(void);
void mathutil_mtxA_sq_from_identity(void);
void mathutil_mtxA_from_translate(Vec *vec);
void mathutil_mtxA_from_translate_xyz(float x, float y, float z);
void mathutil_mtxA_from_rotate_x(s16 angle);
void mathutil_mtxA_from_rotate_y(s16 angle);
void mathutil_mtxA_from_rotate_z(s16 angle);
void mathutil_mtxA_from_mtxB_translate(Vec *vec);
void mathutil_mtxA_from_mtxB_translate_xyz(float x, float y, float z);
void mathutil_mtxA_normalize_basis(void);
void mathutil_mtxA_push(void);
void mathutil_mtxA_pop(void);
void mathutil_mtxA_to_mtx(Mtx mtx);
void mathutil_mtxA_from_mtx(Mtx mtx);
void mathutil_mtxA_peek(void);
void mathutil_mtxA_sq_to_mtx(Mtx mtx);
void mathutil_mtxA_sq_from_mtx(Mtx mtx);
void mathutil_mtxA_from_mtxB(void);
void mathutil_mtxA_to_mtxB(void);
void mathutil_mtx_copy(Mtx src, Mtx dest);
void mathutil_mtxA_invert(void);
void mathutil_mtxA_rigid_invert(void);
void mathutil_mtxA_mult_right(Mtx mtx);
void mathutil_mtxA_mult_left(Mtx mtx);
void mathutil_mtxA_from_mtxB_mult_mtx(Mtx mtx);
void mathutil_mtx_mult(Mtx a, Mtx b, Mtx c);
void mathutil_mtxA_translate(Vec *vec);
void mathutil_mtxA_translate_xyz(float x, float y, float z);
void mathutil_mtxA_translate_neg(Vec *vec);
void mathutil_mtxA_translate_neg_xyz(float x, float y, float z);
void mathutil_mtxA_scale(Vec *vec);
void mathutil_mtxA_scale_s(float scale);
void mathutil_mtxA_scale_xyz(float x, float y, float z);
void mathutil_mtxA_tf_point(Vec *src, Vec *dest);
void mathutil_mtxA_tf_vec(Vec *src, Vec *dest);
void mathutil_mtxA_tf_point_xyz(Vec *vec);
void mathutil_mtxA_tf_vec_xyz(Vec *vec);
void mathutil_mtxA_rigid_inv_tf_point(Vec *vec);
void mathutil_mtxA_rigid_inv_tf_tl(Vec *dest);
void mathutil_mtxA_rigid_inv_tf_vec(Vec *src, Vec *dest);
void mathutil_mtxA_rigid_inv_tf_vec_xyz(float x, float y, float z);
void mathutil_mtxA_rotate_x(s16 angle);
void mathutil_mtxA_rotate_y(s16 angle);
void mathutil_mtxA_rotate_y_sin_cos(float sinAngle, float cosAngle);
void mathutil_mtxA_rotate_z(s16 angle);
void mathutil_mtxA_rotate_z_sin_cos(float sinAngle, float cosAngle);
void mathutil_vec_normalize_len(Vec *vec);
void mathutil_vec_set_len(Vec *src, Vec *dest, float len);
float mathutil_vec_dot_normalized_safe(Vec *a, Vec *b);
void mathutil_mtxA_from_quat(Quaternion *quat);
void mathutil_quat_mult(Quaternion *result, Quaternion *quat1, Quaternion *quat2);
void func_80008378(float a, float b, float c);
void g_math_unk6(Quaternion *quat);
void g_math_unk7(Quaternion *a, Vec *b, Vec *c, float d);
void g_math_unk8(Quaternion *a, Vec *b, Vec *c, float d);
void mathutil_ray_to_euler(Vec *rayStart, Vec *rayEnd, S16Vec *rot);
void mathutil_ray_to_euler_xy(Vec *rayStart, Vec *rayEnd, s16 *rotX, s16 *rotY);
void mathutil_vec_to_euler(Vec *vec, S16Vec *rot);
void mathutil_vec_to_euler_xy(Vec *vec, s16 *rotX, s16 *rotY);
void mathutil_mtxA_to_quat(Quaternion *quat);
void mathutil_quat_from_axis_angle(Quaternion *quat, Vec *axis, s16 angle);
void g_math_unk9_smth_w_quats(Quaternion *a, register Vec *b, register double c);
void mathutil_quat_from_axis_angle(Quaternion *a, Vec *b, s16 c);
double mathutil_quat_to_axis_angle(Quaternion *quat, Vec *axis);
void mathutil_quat_normalize(Quaternion *quat);
void mathutil_quat_from_dirs(Quaternion *quat, Vec *start, Vec *end);
void mathutil_quat_slerp(Quaternion *result, Quaternion *start, Quaternion *end, float t);
void g_math_unk10(Quaternion *a, Quaternion *b);
void g_math_unk11(Quaternion *a, Quaternion *b);
void mathutil_mtxA_to_euler_yxz(s16 *rotY, s16 *rotX, s16 *rotZ);
void mathutil_mtxA_to_euler(S16Vec *rot);
void g_math_unk14(s16 *a, s16 *b, s16 *c);
void g_math_unk15(Vec *a, Vec *b, float c);
void g_math_unk16(Vec *a, Vec *b, float c);
void mathutil_scale_ray(Vec *rayStart, Vec *rayEnd, Vec *outRayEnd, float scale);
u16 mathutil_calc_crc16(s32 length, u8 *data);
